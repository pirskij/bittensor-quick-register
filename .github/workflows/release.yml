name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary-suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Cache cargo registry and build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release directory
      run: mkdir -p release

    - name: Copy binary to release directory (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/btreg${{ matrix.binary-suffix }} release/
        chmod +x release/btreg${{ matrix.binary-suffix }}

    - name: Copy binary to release directory (Windows)
      if: matrix.os == 'windows-latest'
      run: copy target\${{ matrix.target }}\release\btreg${{ matrix.binary-suffix }} release\

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar -czf bittensor-quick-register-${{ matrix.target }}.tar.gz btreg${{ matrix.binary-suffix }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        7z a bittensor-quick-register-${{ matrix.target }}.zip btreg${{ matrix.binary-suffix }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bittensor-quick-register-${{ matrix.target }}
        path: |
          release/bittensor-quick-register-${{ matrix.target }}.tar.gz
          release/bittensor-quick-register-${{ matrix.target }}.zip
        if-no-files-found: ignore

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*/bittensor-quick-register-*.tar.gz
          artifacts/*/bittensor-quick-register-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry and build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --verbose

    #- name: Run clippy
    #  run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check
